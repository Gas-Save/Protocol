{
  "contractName": "IGSVESmartWrapper",
  "abi": [
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_GSVEToken",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setInited",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gasToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "freeUpValue",
          "type": "uint256"
        }
      ],
      "name": "addGasToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gasToken",
          "type": "address"
        }
      ],
      "name": "compatibleGasToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "gasToken",
          "type": "address"
        }
      ],
      "name": "wrapTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawTokenBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpgraded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freeUpValue\",\"type\":\"uint256\"}],\"name\":\"addGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"compatibleGasToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpgraded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GSVEToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"wrapTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"interface for v1 gsve smart wrapper\",\"kind\":\"dev\",\"methods\":{\"addGasToken(address,uint256)\":{\"details\":\"function to enable gas tokens. by default the wrapped tokens are added when the wrapper is deployed using efficiency values based on a known token gas rebate that we store on contract. DANGER: adding unvetted gas tokens that aren't supported by the protocol could be bad! costs 5 gsve to add custom gas tokens if done after the wallet is inited\"},\"compatibleGasToken(address)\":{\"details\":\"checks if the gas token is supported\"},\"getUpgraded()\":{\"details\":\"Returns the upgrade status of the wrapper\"},\"init(address,address)\":{\"details\":\"Initializes the contract setting the deployer as the initial owner. also sets the GSVE token reference\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"setInited()\":{\"details\":\"sets the contract as inited\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeProxy()\":{\"details\":\"function to 'upgrade the proxy' by enabling unwrapped gas token support the user must burn 10 GSVE to upgrade the proxy.\"},\"withdrawBalance()\":{\"details\":\"function that the user can trigger to withdraw the entire balance of their wrapper back to themselves.\"},\"withdrawTokenBalance(address)\":{\"details\":\"function that the user can trigger to withdraw an entire token balance from the wrapper to themselves\"},\"wrapTransaction(bytes,address,uint256,address)\":{\"details\":\"the wrapTransaction function interacts with other smart contracts on the users behalf this wrapper works for any smart contract as long as the dApp/smart contract the wrapper is interacting with has the correct approvals for balances within this wrapper if the function requires a payment, this is handled too and sent from the wrapper balance.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/C/Users/khera/Documents/GitHub/GasSwapTokens/contracts/IGSVESmartWrapper.sol\":\"IGSVESmartWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/khera/Documents/GitHub/GasSwapTokens/contracts/IGSVESmartWrapper.sol\":{\"keccak256\":\"0xba08765d1d96ad0d0ab1437291d9938afa53fdc3a85af2d72294bdd7d1b3bea6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://397535d832b9780aa918988e1f8fc309cb73608db30445ef16f0e0ee60944b11\",\"dweb:/ipfs/Qma8hWruMcLGNeX1YK2qSwKhjcVZU1kEi5pXXs5QQkEG3h\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* @dev interface for v1 gsve smart wrapper\r\n*/\r\ninterface  IGSVESmartWrapper{\r\n\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     * also sets the GSVE token reference\r\n     */\r\n    function init (address initialOwner, address _GSVEToken) external;\r\n\r\n    /**\r\n    * @dev allow the contract to recieve funds. \r\n    * This will be needed for dApps that check balances before enabling transaction creation.\r\n    */\r\n    receive() external payable;\r\n\r\n    /**\r\n    * @dev sets the contract as inited\r\n    */\r\n    function setInited() external;\r\n    /**\r\n    * @dev function to enable gas tokens.\r\n    * by default the wrapped tokens are added when the wrapper is deployed\r\n    * using efficiency values based on a known token gas rebate that we store on contract.\r\n    * DANGER: adding unvetted gas tokens that aren't supported by the protocol could be bad!\r\n    * costs 5 gsve to add custom gas tokens if done after the wallet is inited\r\n    */\r\n    function addGasToken(address gasToken, uint256 freeUpValue) external;\r\n\r\n    /**\r\n    * @dev function to 'upgrade the proxy' by enabling unwrapped gas token support\r\n    * the user must burn 10 GSVE to upgrade the proxy.\r\n    */\r\n    function upgradeProxy() external;\r\n    /**\r\n    * @dev checks if the gas token is supported\r\n    */\r\n    function compatibleGasToken(address gasToken) external view returns(uint256);\r\n\r\n    \r\n    /**\r\n    * @dev the wrapTransaction function interacts with other smart contracts on the users behalf\r\n    * this wrapper works for any smart contract\r\n    * as long as the dApp/smart contract the wrapper is interacting with has the correct approvals for balances within this wrapper\r\n    * if the function requires a payment, this is handled too and sent from the wrapper balance.\r\n    */\r\n    function wrapTransaction(bytes calldata data, address contractAddress, uint256 value, address gasToken) external;\r\n\r\n    /**\r\n    * @dev function that the user can trigger to withdraw the entire balance of their wrapper back to themselves.\r\n    */\r\n    function withdrawBalance() external;\r\n\r\n    /**\r\n    * @dev function that the user can trigger to withdraw an entire token balance from the wrapper to themselves\r\n    */\r\n    function withdrawTokenBalance(address token) external;\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n    \r\n    /**\r\n     * @dev Returns the upgrade status of the wrapper\r\n     */\r\n    function getUpgraded() external view returns (bool);\r\n    \r\n}\r\n",
  "sourcePath": "C:\\Users\\khera\\Documents\\GitHub\\GasSwapTokens\\contracts\\IGSVESmartWrapper.sol",
  "ast": {
    "absolutePath": "/C/Users/khera/Documents/GitHub/GasSwapTokens/contracts/IGSVESmartWrapper.sol",
    "exportedSymbols": {
      "IGSVESmartWrapper": [
        3083
      ]
    },
    "id": 3084,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3005,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:9"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3006,
          "nodeType": "StructuredDocumentation",
          "src": "60:51:9",
          "text": " @dev interface for v1 gsve smart wrapper"
        },
        "fullyImplemented": false,
        "id": 3083,
        "linearizedBaseContracts": [
          3083
        ],
        "name": "IGSVESmartWrapper",
        "nameLocation": "124:17:9",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3007,
              "nodeType": "StructuredDocumentation",
              "src": "152:136:9",
              "text": " @dev Initializes the contract setting the deployer as the initial owner.\n also sets the GSVE token reference"
            },
            "functionSelector": "f09a4016",
            "id": 3014,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "init",
            "nameLocation": "303:4:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3012,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3009,
                  "mutability": "mutable",
                  "name": "initialOwner",
                  "nameLocation": "317:12:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3014,
                  "src": "309:20:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3008,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "309:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3011,
                  "mutability": "mutable",
                  "name": "_GSVEToken",
                  "nameLocation": "339:10:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3014,
                  "src": "331:18:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3010,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "331:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "308:42:9"
            },
            "returnParameters": {
              "id": 3013,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "359:0:9"
            },
            "scope": 3083,
            "src": "294:66:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3015,
              "nodeType": "StructuredDocumentation",
              "src": "368:156:9",
              "text": " @dev allow the contract to recieve funds. \n This will be needed for dApps that check balances before enabling transaction creation."
            },
            "id": 3018,
            "implemented": false,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3016,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "537:2:9"
            },
            "returnParameters": {
              "id": 3017,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "556:0:9"
            },
            "scope": 3083,
            "src": "530:27:9",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3019,
              "nodeType": "StructuredDocumentation",
              "src": "565:51:9",
              "text": " @dev sets the contract as inited"
            },
            "functionSelector": "5e4a1848",
            "id": 3022,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setInited",
            "nameLocation": "631:9:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3020,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "640:2:9"
            },
            "returnParameters": {
              "id": 3021,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "651:0:9"
            },
            "scope": 3083,
            "src": "622:30:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3023,
              "nodeType": "StructuredDocumentation",
              "src": "658:396:9",
              "text": " @dev function to enable gas tokens.\n by default the wrapped tokens are added when the wrapper is deployed\n using efficiency values based on a known token gas rebate that we store on contract.\n DANGER: adding unvetted gas tokens that aren't supported by the protocol could be bad!\n costs 5 gsve to add custom gas tokens if done after the wallet is inited"
            },
            "functionSelector": "00e35602",
            "id": 3030,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addGasToken",
            "nameLocation": "1069:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3028,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3025,
                  "mutability": "mutable",
                  "name": "gasToken",
                  "nameLocation": "1089:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3030,
                  "src": "1081:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3024,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1081:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3027,
                  "mutability": "mutable",
                  "name": "freeUpValue",
                  "nameLocation": "1107:11:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3030,
                  "src": "1099:19:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3026,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1099:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1080:39:9"
            },
            "returnParameters": {
              "id": 3029,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1128:0:9"
            },
            "scope": 3083,
            "src": "1060:69:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3031,
              "nodeType": "StructuredDocumentation",
              "src": "1137:151:9",
              "text": " @dev function to 'upgrade the proxy' by enabling unwrapped gas token support\n the user must burn 10 GSVE to upgrade the proxy."
            },
            "functionSelector": "48347fef",
            "id": 3034,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeProxy",
            "nameLocation": "1303:12:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3032,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1315:2:9"
            },
            "returnParameters": {
              "id": 3033,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1326:0:9"
            },
            "scope": 3083,
            "src": "1294:33:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3035,
              "nodeType": "StructuredDocumentation",
              "src": "1333:60:9",
              "text": " @dev checks if the gas token is supported"
            },
            "functionSelector": "8e13fd78",
            "id": 3042,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "compatibleGasToken",
            "nameLocation": "1408:18:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3038,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3037,
                  "mutability": "mutable",
                  "name": "gasToken",
                  "nameLocation": "1435:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3042,
                  "src": "1427:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3036,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1427:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1426:18:9"
            },
            "returnParameters": {
              "id": 3041,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3040,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3042,
                  "src": "1467:7:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3039,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1467:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1466:9:9"
            },
            "scope": 3083,
            "src": "1399:77:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3043,
              "nodeType": "StructuredDocumentation",
              "src": "1490:389:9",
              "text": " @dev the wrapTransaction function interacts with other smart contracts on the users behalf\n this wrapper works for any smart contract\n as long as the dApp/smart contract the wrapper is interacting with has the correct approvals for balances within this wrapper\n if the function requires a payment, this is handled too and sent from the wrapper balance."
            },
            "functionSelector": "8da02632",
            "id": 3054,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wrapTransaction",
            "nameLocation": "1894:15:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3052,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3045,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "1925:4:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3054,
                  "src": "1910:19:9",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3044,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1910:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3047,
                  "mutability": "mutable",
                  "name": "contractAddress",
                  "nameLocation": "1939:15:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3054,
                  "src": "1931:23:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3046,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1931:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3049,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "1964:5:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3054,
                  "src": "1956:13:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3048,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1956:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3051,
                  "mutability": "mutable",
                  "name": "gasToken",
                  "nameLocation": "1979:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3054,
                  "src": "1971:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3050,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1971:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1909:79:9"
            },
            "returnParameters": {
              "id": 3053,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1997:0:9"
            },
            "scope": 3083,
            "src": "1885:113:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3055,
              "nodeType": "StructuredDocumentation",
              "src": "2006:126:9",
              "text": " @dev function that the user can trigger to withdraw the entire balance of their wrapper back to themselves."
            },
            "functionSelector": "5fd8c710",
            "id": 3058,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawBalance",
            "nameLocation": "2147:15:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3056,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2162:2:9"
            },
            "returnParameters": {
              "id": 3057,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2173:0:9"
            },
            "scope": 3083,
            "src": "2138:36:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3059,
              "nodeType": "StructuredDocumentation",
              "src": "2182:125:9",
              "text": " @dev function that the user can trigger to withdraw an entire token balance from the wrapper to themselves"
            },
            "functionSelector": "90bb6153",
            "id": 3064,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawTokenBalance",
            "nameLocation": "2322:20:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3062,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3061,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "2351:5:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3064,
                  "src": "2343:13:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3060,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2343:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2342:15:9"
            },
            "returnParameters": {
              "id": 3063,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2366:0:9"
            },
            "scope": 3083,
            "src": "2313:54:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3065,
              "nodeType": "StructuredDocumentation",
              "src": "2375:67:9",
              "text": " @dev Returns the address of the current owner."
            },
            "functionSelector": "8da5cb5b",
            "id": 3070,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "owner",
            "nameLocation": "2457:5:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3066,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2462:2:9"
            },
            "returnParameters": {
              "id": 3069,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3068,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3070,
                  "src": "2488:7:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3067,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2488:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2487:9:9"
            },
            "scope": 3083,
            "src": "2448:49:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3071,
              "nodeType": "StructuredDocumentation",
              "src": "2505:141:9",
              "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
            },
            "functionSelector": "f2fde38b",
            "id": 3076,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnership",
            "nameLocation": "2661:17:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3074,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3073,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nameLocation": "2687:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3076,
                  "src": "2679:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3072,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2679:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2678:18:9"
            },
            "returnParameters": {
              "id": 3075,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2705:0:9"
            },
            "scope": 3083,
            "src": "2652:54:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3077,
              "nodeType": "StructuredDocumentation",
              "src": "2718:67:9",
              "text": " @dev Returns the upgrade status of the wrapper"
            },
            "functionSelector": "812e20dd",
            "id": 3082,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUpgraded",
            "nameLocation": "2800:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3078,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2811:2:9"
            },
            "returnParameters": {
              "id": 3081,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3080,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3082,
                  "src": "2837:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3079,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2837:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2836:6:9"
            },
            "scope": 3083,
            "src": "2791:52:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3084,
        "src": "113:2739:9",
        "usedErrors": []
      }
    ],
    "src": "33:2821:9"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/khera/Documents/GitHub/GasSwapTokens/contracts/IGSVESmartWrapper.sol",
    "exportedSymbols": {
      "IGSVESmartWrapper": [
        3083
      ]
    },
    "id": 3084,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3005,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:9"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3006,
          "nodeType": "StructuredDocumentation",
          "src": "60:51:9",
          "text": " @dev interface for v1 gsve smart wrapper"
        },
        "fullyImplemented": false,
        "id": 3083,
        "linearizedBaseContracts": [
          3083
        ],
        "name": "IGSVESmartWrapper",
        "nameLocation": "124:17:9",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3007,
              "nodeType": "StructuredDocumentation",
              "src": "152:136:9",
              "text": " @dev Initializes the contract setting the deployer as the initial owner.\n also sets the GSVE token reference"
            },
            "functionSelector": "f09a4016",
            "id": 3014,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "init",
            "nameLocation": "303:4:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3012,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3009,
                  "mutability": "mutable",
                  "name": "initialOwner",
                  "nameLocation": "317:12:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3014,
                  "src": "309:20:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3008,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "309:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3011,
                  "mutability": "mutable",
                  "name": "_GSVEToken",
                  "nameLocation": "339:10:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3014,
                  "src": "331:18:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3010,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "331:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "308:42:9"
            },
            "returnParameters": {
              "id": 3013,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "359:0:9"
            },
            "scope": 3083,
            "src": "294:66:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3015,
              "nodeType": "StructuredDocumentation",
              "src": "368:156:9",
              "text": " @dev allow the contract to recieve funds. \n This will be needed for dApps that check balances before enabling transaction creation."
            },
            "id": 3018,
            "implemented": false,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3016,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "537:2:9"
            },
            "returnParameters": {
              "id": 3017,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "556:0:9"
            },
            "scope": 3083,
            "src": "530:27:9",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3019,
              "nodeType": "StructuredDocumentation",
              "src": "565:51:9",
              "text": " @dev sets the contract as inited"
            },
            "functionSelector": "5e4a1848",
            "id": 3022,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setInited",
            "nameLocation": "631:9:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3020,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "640:2:9"
            },
            "returnParameters": {
              "id": 3021,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "651:0:9"
            },
            "scope": 3083,
            "src": "622:30:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3023,
              "nodeType": "StructuredDocumentation",
              "src": "658:396:9",
              "text": " @dev function to enable gas tokens.\n by default the wrapped tokens are added when the wrapper is deployed\n using efficiency values based on a known token gas rebate that we store on contract.\n DANGER: adding unvetted gas tokens that aren't supported by the protocol could be bad!\n costs 5 gsve to add custom gas tokens if done after the wallet is inited"
            },
            "functionSelector": "00e35602",
            "id": 3030,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addGasToken",
            "nameLocation": "1069:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3028,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3025,
                  "mutability": "mutable",
                  "name": "gasToken",
                  "nameLocation": "1089:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3030,
                  "src": "1081:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3024,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1081:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3027,
                  "mutability": "mutable",
                  "name": "freeUpValue",
                  "nameLocation": "1107:11:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3030,
                  "src": "1099:19:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3026,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1099:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1080:39:9"
            },
            "returnParameters": {
              "id": 3029,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1128:0:9"
            },
            "scope": 3083,
            "src": "1060:69:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3031,
              "nodeType": "StructuredDocumentation",
              "src": "1137:151:9",
              "text": " @dev function to 'upgrade the proxy' by enabling unwrapped gas token support\n the user must burn 10 GSVE to upgrade the proxy."
            },
            "functionSelector": "48347fef",
            "id": 3034,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeProxy",
            "nameLocation": "1303:12:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3032,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1315:2:9"
            },
            "returnParameters": {
              "id": 3033,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1326:0:9"
            },
            "scope": 3083,
            "src": "1294:33:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3035,
              "nodeType": "StructuredDocumentation",
              "src": "1333:60:9",
              "text": " @dev checks if the gas token is supported"
            },
            "functionSelector": "8e13fd78",
            "id": 3042,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "compatibleGasToken",
            "nameLocation": "1408:18:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3038,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3037,
                  "mutability": "mutable",
                  "name": "gasToken",
                  "nameLocation": "1435:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3042,
                  "src": "1427:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3036,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1427:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1426:18:9"
            },
            "returnParameters": {
              "id": 3041,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3040,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3042,
                  "src": "1467:7:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3039,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1467:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1466:9:9"
            },
            "scope": 3083,
            "src": "1399:77:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3043,
              "nodeType": "StructuredDocumentation",
              "src": "1490:389:9",
              "text": " @dev the wrapTransaction function interacts with other smart contracts on the users behalf\n this wrapper works for any smart contract\n as long as the dApp/smart contract the wrapper is interacting with has the correct approvals for balances within this wrapper\n if the function requires a payment, this is handled too and sent from the wrapper balance."
            },
            "functionSelector": "8da02632",
            "id": 3054,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wrapTransaction",
            "nameLocation": "1894:15:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3052,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3045,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "1925:4:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3054,
                  "src": "1910:19:9",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3044,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1910:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3047,
                  "mutability": "mutable",
                  "name": "contractAddress",
                  "nameLocation": "1939:15:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3054,
                  "src": "1931:23:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3046,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1931:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3049,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "1964:5:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3054,
                  "src": "1956:13:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3048,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1956:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3051,
                  "mutability": "mutable",
                  "name": "gasToken",
                  "nameLocation": "1979:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3054,
                  "src": "1971:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3050,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1971:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1909:79:9"
            },
            "returnParameters": {
              "id": 3053,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1997:0:9"
            },
            "scope": 3083,
            "src": "1885:113:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3055,
              "nodeType": "StructuredDocumentation",
              "src": "2006:126:9",
              "text": " @dev function that the user can trigger to withdraw the entire balance of their wrapper back to themselves."
            },
            "functionSelector": "5fd8c710",
            "id": 3058,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawBalance",
            "nameLocation": "2147:15:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3056,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2162:2:9"
            },
            "returnParameters": {
              "id": 3057,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2173:0:9"
            },
            "scope": 3083,
            "src": "2138:36:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3059,
              "nodeType": "StructuredDocumentation",
              "src": "2182:125:9",
              "text": " @dev function that the user can trigger to withdraw an entire token balance from the wrapper to themselves"
            },
            "functionSelector": "90bb6153",
            "id": 3064,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawTokenBalance",
            "nameLocation": "2322:20:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3062,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3061,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "2351:5:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3064,
                  "src": "2343:13:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3060,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2343:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2342:15:9"
            },
            "returnParameters": {
              "id": 3063,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2366:0:9"
            },
            "scope": 3083,
            "src": "2313:54:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3065,
              "nodeType": "StructuredDocumentation",
              "src": "2375:67:9",
              "text": " @dev Returns the address of the current owner."
            },
            "functionSelector": "8da5cb5b",
            "id": 3070,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "owner",
            "nameLocation": "2457:5:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3066,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2462:2:9"
            },
            "returnParameters": {
              "id": 3069,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3068,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3070,
                  "src": "2488:7:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3067,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2488:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2487:9:9"
            },
            "scope": 3083,
            "src": "2448:49:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3071,
              "nodeType": "StructuredDocumentation",
              "src": "2505:141:9",
              "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
            },
            "functionSelector": "f2fde38b",
            "id": 3076,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnership",
            "nameLocation": "2661:17:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3074,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3073,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nameLocation": "2687:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 3076,
                  "src": "2679:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3072,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2679:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2678:18:9"
            },
            "returnParameters": {
              "id": 3075,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2705:0:9"
            },
            "scope": 3083,
            "src": "2652:54:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3077,
              "nodeType": "StructuredDocumentation",
              "src": "2718:67:9",
              "text": " @dev Returns the upgrade status of the wrapper"
            },
            "functionSelector": "812e20dd",
            "id": 3082,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUpgraded",
            "nameLocation": "2800:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3078,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2811:2:9"
            },
            "returnParameters": {
              "id": 3081,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3080,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3082,
                  "src": "2837:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3079,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2837:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2836:6:9"
            },
            "scope": 3083,
            "src": "2791:52:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3084,
        "src": "113:2739:9",
        "usedErrors": []
      }
    ],
    "src": "33:2821:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.4+commit.c7e474f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-05-15T16:37:09.237Z",
  "devdoc": {
    "details": "interface for v1 gsve smart wrapper",
    "kind": "dev",
    "methods": {
      "addGasToken(address,uint256)": {
        "details": "function to enable gas tokens. by default the wrapped tokens are added when the wrapper is deployed using efficiency values based on a known token gas rebate that we store on contract. DANGER: adding unvetted gas tokens that aren't supported by the protocol could be bad! costs 5 gsve to add custom gas tokens if done after the wallet is inited"
      },
      "compatibleGasToken(address)": {
        "details": "checks if the gas token is supported"
      },
      "getUpgraded()": {
        "details": "Returns the upgrade status of the wrapper"
      },
      "init(address,address)": {
        "details": "Initializes the contract setting the deployer as the initial owner. also sets the GSVE token reference"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "setInited()": {
        "details": "sets the contract as inited"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeProxy()": {
        "details": "function to 'upgrade the proxy' by enabling unwrapped gas token support the user must burn 10 GSVE to upgrade the proxy."
      },
      "withdrawBalance()": {
        "details": "function that the user can trigger to withdraw the entire balance of their wrapper back to themselves."
      },
      "withdrawTokenBalance(address)": {
        "details": "function that the user can trigger to withdraw an entire token balance from the wrapper to themselves"
      },
      "wrapTransaction(bytes,address,uint256,address)": {
        "details": "the wrapTransaction function interacts with other smart contracts on the users behalf this wrapper works for any smart contract as long as the dApp/smart contract the wrapper is interacting with has the correct approvals for balances within this wrapper if the function requires a payment, this is handled too and sent from the wrapper balance."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}